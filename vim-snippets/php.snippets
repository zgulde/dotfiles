
snippet li "laravel log info"
Log::info($0);
endsnippet

snippet nl "php eol"
PHP_EOL
endsnippet

snippet php "php tags"
<?php $0 ?>
endsnippet

snippet ? "ternary"
(${1:condition}) ? ${2:if_true} : ${3:if_false};
endsnippet

snippet map "array map"
array_map(${2:function(\$${3:element}){$0}}, ${1:array})
endsnippet

snippet filter "array filter"
array_filter(${1:array}, ${2:function(\$${3:element}){$0}})
endsnippet

snippet reduce "array reduce"
array_reduce(${1:array}, ${4:function($${5:acc}, $${6:item})}{$0}${2:, ${3:initial}})
endsnippet

snippet do "do while loop"
do {
	$0
} while (${1:condition});
endsnippet

snippet set "set a variable based on whether an array key is set"
$${1:var} = isset($${3:array}['$2']) ? $$3['$2'] : ${4:default};
endsnippet

snippet throw "throw an exception"
throw new $1Exception(${3:"$2"});
endsnippet

snippet try "try catch block"
try{
	${VISUAL}$1
} catch ($2Exception $e){
	$3
}
endsnippet

snippet d "var dump"
var_dump($1);$0
endsnippet

snippet if "if statement"
if ($1) {
	${VISUAL}$2
}
endsnippet

snippet for "for loop"
for (\$$1 = ${2:0}; \$$1 < ${3:count($4)}; \$$1++) {
    $0
}
endsnippet

snippet fore "foreach loop"
foreach (\$${1:array} as \$${2:key}${3: => \$${4:value}}) {
    $0
}
endsnippet

snippet def "define a constant"
define('$1', $0);
endsnippet

snippet req "require"
require${1:_once} '$2';
endsnippet

snippet * "docbloc"
/**
 * $0
 **/
endsnippet
